// Generated by CoffeeScript 1.4.0
var DEFAULT_FIELD_SETUP, DEFAULT_MODEL, DIMENSION_META, Delegator, DimensionWidget, DimensionsWidget, FIELDS_META, ModelEditor, SAMPLE_DATA, UniqueKeyWidget, Widget, key, util, value, _ref,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Delegator = (function() {

  Delegator.prototype.events = {};

  Delegator.prototype.options = {};

  Delegator.prototype.element = null;

  function Delegator(element, options) {
    this.options = $.extend(true, {}, this.options, options);
    this.element = $(element);
    this.on = this.subscribe;
    this.addEvents();
  }

  Delegator.prototype.addEvents = function() {
    var event, functionName, sel, selector, _i, _ref, _ref1, _results;
    _ref = this.events;
    _results = [];
    for (sel in _ref) {
      functionName = _ref[sel];
      _ref1 = sel.split(' '), selector = 2 <= _ref1.length ? __slice.call(_ref1, 0, _i = _ref1.length - 1) : (_i = 0, []), event = _ref1[_i++];
      _results.push(this.addEvent(selector.join(' '), event, functionName));
    }
    return _results;
  };

  Delegator.prototype.addEvent = function(bindTo, event, functionName) {
    var closure, isBlankSelector,
      _this = this;
    closure = function() {
      return _this[functionName].apply(_this, arguments);
    };
    isBlankSelector = typeof bindTo === 'string' && bindTo.replace(/\s+/g, '') === '';
    if (isBlankSelector) {
      bindTo = this.element;
    }
    if (typeof bindTo === 'string') {
      this.element.delegate(bindTo, event, closure);
    } else {
      if (this.isCustomEvent(event)) {
        this.subscribe(event, closure);
      } else {
        $(bindTo).bind(event, closure);
      }
    }
    return this;
  };

  Delegator.prototype.isCustomEvent = function(event) {
    var natives;
    natives = "blur focus focusin focusout load resize scroll unload click dblclick\nmousedown mouseup mousemove mouseover mouseout mouseenter mouseleave\nchange select submit keydown keypress keyup error".split(/[^a-z]+/);
    event = event.split('.')[0];
    return $.inArray(event, natives) === -1;
  };

  Delegator.prototype.publish = function() {
    this.element.triggerHandler.apply(this.element, arguments);
    return this;
  };

  Delegator.prototype.subscribe = function(event, callback) {
    var closure;
    closure = function() {
      return callback.apply(this, [].slice.call(arguments, 1));
    };
    closure.guid = callback.guid = ($.guid += 1);
    this.element.bind(event, closure);
    return this;
  };

  Delegator.prototype.unsubscribe = function() {
    this.element.unbind.apply(this.element, arguments);
    return this;
  };

  return Delegator;

})();

$.plugin = function(name, object) {
  return jQuery.fn[name] = function(options) {
    var args;
    args = Array.prototype.slice.call(arguments, 1);
    return this.each(function() {
      var instance;
      instance = $.data(this, name);
      if (instance) {
        return options && instance[options].apply(instance, args);
      } else {
        instance = new object(this, options);
        return $.data(this, name, instance);
      }
    });
  };
};

$.a2o = function(ary) {
  var obj, walk;
  obj = {};
  walk = function(o, path, value) {
    var key;
    key = path[0];
    if (path.length === 2 && path[1] === '') {
      if ($.type(o[key]) !== 'array') {
        o[key] = [];
      }
      return o[key].push(value);
    } else if (path.length === 1) {
      return o[key] = value;
    } else {
      if ($.type(o[key]) !== 'object') {
        o[key] = {};
      }
      return walk(o[key], path.slice(1), value);
    }
  };
  $.each(ary, function() {
    var p, path;
    path = this.name.split('[');
    path = [path[0]].concat(__slice.call((function() {
        var _i, _len, _ref, _results;
        _ref = path.slice(1);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push(p.slice(0, -1));
        }
        return _results;
      })()));
    return walk(obj, path, this.value);
  });
  return obj;
};

$.fn.serializeObject = function() {
  var ary;
  ary = this.serializeArray();
  return $.a2o(ary);
};

DEFAULT_FIELD_SETUP = {
  'activity-website': {
    datatype: 'compound',
    label: 'Activity Website',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      }
    }
  },
  'reporting-org': {
    datatype: 'compound',
    label: 'Reporting Org',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'ref': {
        datatype: 'column',
        required: true
      },
      'type': {
        datatype: 'column',
        required: false
      }
    }
  },
  'participating-org': {
    datatype: 'compound',
    label: 'Participating Org',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'ref': {
        datatype: 'column',
        required: false
      },
      'type': {
        datatype: 'column',
        required: false
      },
      'role': {
        datatype: 'column',
        required: true
      }
    }
  },
  'activity-scope': {
    datatype: 'compound',
    label: 'Activity Scope',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: false
      }
    }
  },
  'recipient-country': {
    datatype: 'compound',
    label: 'Recipient Country',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: true
      },
      'percentage': {
        datatype: 'column',
        required: false
      }
    }
  },
  'recipient-region': {
    datatype: 'compound',
    label: 'Recipient Region',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: false
      },
      'vocabulary': {
        datatype: 'column',
        required: false
      },
      'percentage': {
        datatype: 'column',
        required: false
      }
    }
  },
  'collaboration-type': {
    datatype: 'compound',
    label: 'Collaboration Type',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'default-flow-type': {
    datatype: 'compound',
    label: 'Default Flow Type',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'default-aid-type': {
    datatype: 'compound',
    label: 'Default Aid Type',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'default-finance-type': {
    datatype: 'compound',
    label: 'Default Finance Type',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'iati-identifier': {
    datatype: 'compound',
    label: 'Iati Identifier',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      }
    }
  },
  'other-identifier': {
    datatype: 'compound',
    label: 'Other Identifier',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'owner-ref': {
        datatype: 'column',
        required: false
      },
      'owner-name': {
        datatype: 'column',
        required: false
      }
    }
  },
  'title': {
    datatype: 'compound',
    label: 'Title',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      }
    }
  },
  'description': {
    datatype: 'compound',
    label: 'Description',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      }
    }
  },
  'sector': {
    datatype: 'compound',
    label: 'Sector',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: false
      },
      'vocabulary': {
        datatype: 'column',
        required: false
      },
      'percentage': {
        datatype: 'column',
        required: false
      }
    }
  },
  'activity-date': {
    datatype: 'compound',
    label: 'Activity Date',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      }
    }
  },
  'activity-status': {
    datatype: 'compound',
    label: 'Activity Status',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: false
      }
    }
  },
  'contact-info': {
    datatype: 'compound',
    label: 'Contact Info',
    fields: {
      'type': {
        datatype: 'column',
        required: false
      },
      'organisation': {
        datatype: 'compound',
        label: 'Organisation',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'person-name': {
        datatype: 'compound',
        label: 'Person Name',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'job-title': {
        datatype: 'compound',
        label: 'Job Title',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'telephone': {
        datatype: 'compound',
        label: 'Telephone',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'email': {
        datatype: 'compound',
        label: 'Email',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'mailing-address': {
        datatype: 'compound',
        label: 'Mailing Address',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'website': {
        datatype: 'compound',
        label: 'Website',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'default-tied-status': {
    datatype: 'compound',
    label: 'Default Tied Status',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: true
      }
    }
  },
  'policy-marker': {
    datatype: 'compound',
    label: 'Policy Marker',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'code': {
        datatype: 'column',
        required: false
      },
      'vocabulary': {
        datatype: 'column',
        required: false
      },
      'significance': {
        datatype: 'column',
        required: false
      }
    }
  },
  'location': {
    datatype: 'compound',
    label: 'Location',
    fields: {
      'percentage': {
        datatype: 'column',
        required: false
      },
      'location-type': {
        datatype: 'compound',
        label: 'Location Type',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'name': {
        datatype: 'compound',
        label: 'Name',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'description': {
        datatype: 'compound',
        label: 'Description',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'administrative': {
        datatype: 'compound',
        label: 'Administrative',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'country': {
            datatype: 'column',
            required: false
          },
          'adm1': {
            datatype: 'column',
            required: false
          },
          'adm2': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'country': {
            datatype: 'column',
            required: false
          },
          'adm1': {
            datatype: 'column',
            required: false
          },
          'adm2': {
            datatype: 'column',
            required: false
          }
        }
      },
      'coordinates': {
        datatype: 'compound',
        label: 'Coordinates',
        fields: {
          'latitude': {
            datatype: 'column',
            required: true
          },
          'longitude': {
            datatype: 'column',
            required: true
          },
          'precision': {
            datatype: 'column',
            required: false
          },
          'latitude': {
            datatype: 'column',
            required: true
          },
          'longitude': {
            datatype: 'column',
            required: true
          },
          'precision': {
            datatype: 'column',
            required: false
          }
        }
      },
      'gazetteer-entry': {
        datatype: 'compound',
        label: 'Gazetteer Entry',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'gazetteer-ref': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'gazetteer-ref': {
            datatype: 'column',
            required: true
          }
        }
      }
    }
  },
  'capital-spend': {
    datatype: 'compound',
    label: 'Capital Spend',
    fields: {
      'percentage': {
        datatype: 'column',
        required: true
      }
    }
  },
  'transaction': {
    datatype: 'compound',
    label: 'Transaction',
    fields: {
      'ref': {
        datatype: 'column',
        required: false
      },
      'value': {
        datatype: 'compound',
        label: 'Value',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          }
        }
      },
      'description': {
        datatype: 'compound',
        label: 'Description',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'transaction-type': {
        datatype: 'compound',
        label: 'Transaction Type',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'provider-org': {
        datatype: 'compound',
        label: 'Provider Org',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'ref': {
            datatype: 'column',
            required: false
          },
          'provider-activity-id': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'ref': {
            datatype: 'column',
            required: false
          },
          'provider-activity-id': {
            datatype: 'column',
            required: false
          }
        }
      },
      'receiver-org': {
        datatype: 'compound',
        label: 'Receiver Org',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'ref': {
            datatype: 'column',
            required: false
          },
          'receiver-activity-id': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'ref': {
            datatype: 'column',
            required: false
          },
          'receiver-activity-id': {
            datatype: 'column',
            required: false
          }
        }
      },
      'transaction-date': {
        datatype: 'compound',
        label: 'Transaction Date',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: true
          }
        }
      },
      'flow-type': {
        datatype: 'compound',
        label: 'Flow Type',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'aid-type': {
        datatype: 'compound',
        label: 'Aid Type',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'finance-type': {
        datatype: 'compound',
        label: 'Finance Type',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'tied-status': {
        datatype: 'compound',
        label: 'Tied Status',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'disbursement-channel': {
        datatype: 'compound',
        label: 'Disbursement Channel',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          }
        }
      }
    }
  },
  'result': {
    datatype: 'compound',
    label: 'Result',
    fields: {
      'type': {
        datatype: 'column',
        required: true
      },
      'aggregation-status': {
        datatype: 'column',
        required: false
      },
      'title': {
        datatype: 'compound',
        label: 'Title',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'description': {
        datatype: 'compound',
        label: 'Description',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'indicator': {
        datatype: 'compound',
        label: 'Indicator',
        fields: {
          'measure': {
            datatype: 'column',
            required: true
          },
          'ascending': {
            datatype: 'column',
            required: false
          },
          'measure': {
            datatype: 'column',
            required: true
          },
          'ascending': {
            datatype: 'column',
            required: false
          },
          'title': {
            datatype: 'compound',
            label: 'Title',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          },
          'description': {
            datatype: 'compound',
            label: 'Description',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          },
          'baseline': {
            datatype: 'compound',
            label: 'Baseline',
            fields: {
              'year': {
                datatype: 'column',
                required: true
              },
              'value': {
                datatype: 'column',
                required: true
              },
              'year': {
                datatype: 'column',
                required: true
              },
              'value': {
                datatype: 'column',
                required: true
              },
              'comment': {
                datatype: 'compound',
                label: 'Comment',
                fields: {
                  'text': {
                    datatype: 'column',
                    required: false
                  }
                }
              }
            }
          },
          'period': {
            datatype: 'compound',
            label: 'Period',
            fields: {
              'period-start': {
                datatype: 'compound',
                label: 'Period Start',
                fields: {
                  'text': {
                    datatype: 'column',
                    required: false
                  },
                  'iso-date': {
                    datatype: 'column',
                    required: false
                  },
                  'text': {
                    datatype: 'column',
                    required: false
                  },
                  'iso-date': {
                    datatype: 'column',
                    required: false
                  }
                }
              },
              'period-end': {
                datatype: 'compound',
                label: 'Period End',
                fields: {
                  'text': {
                    datatype: 'column',
                    required: false
                  },
                  'iso-date': {
                    datatype: 'column',
                    required: false
                  },
                  'text': {
                    datatype: 'column',
                    required: false
                  },
                  'iso-date': {
                    datatype: 'column',
                    required: false
                  }
                }
              },
              'target': {
                datatype: 'compound',
                label: 'Target',
                fields: {
                  'value': {
                    datatype: 'column',
                    required: true
                  },
                  'value': {
                    datatype: 'column',
                    required: true
                  },
                  'comment': {
                    datatype: 'compound',
                    label: 'Comment',
                    fields: {
                      'text': {
                        datatype: 'column',
                        required: false
                      }
                    }
                  }
                }
              },
              'actual': {
                datatype: 'compound',
                label: 'Actual',
                fields: {
                  'value': {
                    datatype: 'column',
                    required: true
                  },
                  'value': {
                    datatype: 'column',
                    required: true
                  },
                  'comment': {
                    datatype: 'compound',
                    label: 'Comment',
                    fields: {
                      'text': {
                        datatype: 'column',
                        required: false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  'conditions': {
    datatype: 'compound',
    label: 'Conditions',
    fields: {
      'attached': {
        datatype: 'column',
        required: true
      },
      'condition': {
        datatype: 'compound',
        label: 'Condition',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'type': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'type': {
            datatype: 'column',
            required: true
          }
        }
      }
    }
  },
  'budget': {
    datatype: 'compound',
    label: 'Budget',
    fields: {
      'type': {
        datatype: 'column',
        required: false
      },
      'period-start': {
        datatype: 'compound',
        label: 'Period Start',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: false
          }
        }
      },
      'period-end': {
        datatype: 'compound',
        label: 'Period End',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: false
          }
        }
      },
      'value': {
        datatype: 'compound',
        label: 'Value',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'planned-disbursement': {
    datatype: 'compound',
    label: 'Planned Disbursement',
    fields: {
      'updated': {
        datatype: 'column',
        required: false
      },
      'period-start': {
        datatype: 'compound',
        label: 'Period Start',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: false
          }
        }
      },
      'period-end': {
        datatype: 'compound',
        label: 'Period End',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'iso-date': {
            datatype: 'column',
            required: false
          }
        }
      },
      'value': {
        datatype: 'compound',
        label: 'Value',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'country-budget-items': {
    datatype: 'compound',
    label: 'Country Budget Items',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'vocabulary': {
        datatype: 'column',
        required: true
      },
      'budget-item': {
        datatype: 'compound',
        label: 'Budget Item',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'percentage': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'percentage': {
            datatype: 'column',
            required: true
          },
          'description': {
            datatype: 'compound',
            label: 'Description',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      }
    }
  },
  'related-activity': {
    datatype: 'compound',
    label: 'Related Activity',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'ref': {
        datatype: 'column',
        required: true
      },
      'type': {
        datatype: 'column',
        required: true
      }
    }
  },
  'document-link': {
    datatype: 'compound',
    label: 'Document Link',
    fields: {
      'url': {
        datatype: 'column',
        required: true
      },
      'format': {
        datatype: 'column',
        required: false
      },
      'title': {
        datatype: 'compound',
        label: 'Title',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          }
        }
      },
      'category': {
        datatype: 'compound',
        label: 'Category',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          }
        }
      },
      'language': {
        datatype: 'compound',
        label: 'Language',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: false
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  },
  'legacy-data': {
    datatype: 'compound',
    label: 'Legacy Data',
    fields: {
      'text': {
        datatype: 'column',
        required: false
      },
      'name': {
        datatype: 'column',
        required: true
      },
      'value': {
        datatype: 'column',
        required: true
      },
      'iati-equivalent': {
        datatype: 'column',
        required: false
      }
    }
  },
  'crs-add': {
    datatype: 'compound',
    label: 'Crs Add',
    fields: {
      'aidtype-flag': {
        datatype: 'compound',
        label: 'Aidtype Flag',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'significance': {
            datatype: 'column',
            required: true
          },
          'text': {
            datatype: 'column',
            required: false
          },
          'code': {
            datatype: 'column',
            required: true
          },
          'significance': {
            datatype: 'column',
            required: true
          }
        }
      },
      'loan-terms': {
        datatype: 'compound',
        label: 'Loan Terms',
        fields: {
          'rate-1': {
            datatype: 'column',
            required: false
          },
          'rate-2': {
            datatype: 'column',
            required: false
          },
          'rate-1': {
            datatype: 'column',
            required: false
          },
          'rate-2': {
            datatype: 'column',
            required: false
          },
          'repayment-type': {
            datatype: 'compound',
            label: 'Repayment Type',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'code': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              },
              'code': {
                datatype: 'column',
                required: false
              }
            }
          },
          'repayment-plan': {
            datatype: 'compound',
            label: 'Repayment Plan',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'code': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              },
              'code': {
                datatype: 'column',
                required: false
              }
            }
          },
          'commitment-date': {
            datatype: 'compound',
            label: 'Commitment Date',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'iso-date': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              },
              'iso-date': {
                datatype: 'column',
                required: false
              }
            }
          },
          'repayment-first-date': {
            datatype: 'compound',
            label: 'Repayment First Date',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'iso-date': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              },
              'iso-date': {
                datatype: 'column',
                required: false
              }
            }
          },
          'repayment-final-date': {
            datatype: 'compound',
            label: 'Repayment Final Date',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'iso-date': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              },
              'iso-date': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      },
      'loan-status': {
        datatype: 'compound',
        label: 'Loan Status',
        fields: {
          'year': {
            datatype: 'column',
            required: true
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: true
          },
          'year': {
            datatype: 'column',
            required: true
          },
          'currency': {
            datatype: 'column',
            required: false
          },
          'value-date': {
            datatype: 'column',
            required: true
          },
          'repayment-type': {
            datatype: 'compound',
            label: 'Repayment Type',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'code': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              },
              'code': {
                datatype: 'column',
                required: false
              }
            }
          },
          'interest-received': {
            datatype: 'compound',
            label: 'Interest Received',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          },
          'principal-outstanding': {
            datatype: 'compound',
            label: 'Principal Outstanding',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          },
          'principal-arrears': {
            datatype: 'compound',
            label: 'Principal Arrears',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          },
          'interest-arrears': {
            datatype: 'compound',
            label: 'Interest Arrears',
            fields: {
              'text': {
                datatype: 'column',
                required: false
              },
              'text': {
                datatype: 'column',
                required: false
              }
            }
          }
        }
      }
    }
  },
  'fss': {
    datatype: 'compound',
    label: 'Fss',
    fields: {
      'extraction-date': {
        datatype: 'column',
        required: true
      },
      'priority': {
        datatype: 'column',
        required: false
      },
      'phaseout-year': {
        datatype: 'column',
        required: false
      },
      'forecast': {
        datatype: 'compound',
        label: 'Forecast',
        fields: {
          'text': {
            datatype: 'column',
            required: false
          }
        }
      }
    }
  }
};

DIMENSION_META = {
  'iati-activity': {
    fixedDataType: true,
    helpText: '\n  Top-level element for a single IATI activity report.\n'
  },
  'activity-website': {
    fixedDataType: true,
    helpText: '\n  A link to a web site providing more information about the aid\n  activity.  Multiple versions of the link may appear for\n  different languages.\n'
  },
  'reporting-org': {
    fixedDataType: true,
    helpText: '\n  The organisation issuing the report. May be a primary source \n  (reporting on its own activity as donor, implementing agency, \n  etc) or a secondary source (reporting on the activities of \n  another organisation). \n  \n  Specifying the @ref and @role attributes is strongly \n  recommended. May contain the organisation name as content. \n  \n  For the value of the @type attribute, \n  see http://iatistandard.org/codelists/organisation-type. \n  \n  For guidance on constructing the value of the @ref attribute, \n  see http://iatistandard.org/org-ref\n'
  },
  'participating-org': {
    fixedDataType: true,
    helpText: '\n  An organisation (including the reporting organisation)\n  involved with the activity.  May be a donor, fund, agency,\n  etc.  Specifying the @identifier and @role attributes is\n  strongly recommended.  May contain the organisation name as\n  content.\n\n  For the value of the @type attribute, see\n  http://iatistandard.org/codelists/organisation-type\n\n  For the value of the @ref attribute, see the list of\n  officially-registered organizations at\n  http://iatistandard.org/codelists/organisation\n'
  },
  'activity-scope': {
    fixedDataType: true,
    helpText: '\n  What geographical area does the activity encompass?\n  eg. Global, Regional, Multi-National, National, Multiple\n  (sub-national) administrative areas, etc\n'
  },
  'recipient-country': {
    fixedDataType: true,
    helpText: '\n  A partner country that will benefit from this activity.  This\n  element is primarily for administrative and geopolitical\n  purposes.  If a specific country is not known, the activity\n  report can use the recipient-region element instead. For\n  geographical location, use the location element.\n\n  For the value of the @code attribute, see\n  http://iatistandard.org/codelists/country\n'
  },
  'recipient-region': {
    fixedDataType: true,
    helpText: '\n  A geopolitical region (above the country level) that will\n  benefit from this activity.  This element is primarily for\n  administrative and geopolitical purposes.  If the specific\n  country/-ies are known, the activity report can use the\n  recipient-country element instead. For geographical location,\n  use the location element.\n\n  For the value of the @code attribute, see\n  http://iatistandard.org/codelists/region\n'
  },
  'collaboration-type': {
    fixedDataType: true,
    helpText: '\n  The type of collaboration involved in the project\'s\n  disbursements, e.g. "bilateral" or "multilateral".\n\n  For the value of the @code attribute, see\n  http://iatistandard.org/codelists/collaboration_type\n'
  },
  'default-flow-type': {
    fixedDataType: true,
    helpText: '\n  The type of assistance provided, e.g. Official Development\n  Assistance (ODA).  Type types will be defined by IATI.\n\n  For the value of the @code attribute, see\n  http://iatistandard.org/codelists/flow_type\n'
  },
  'default-aid-type': {
    fixedDataType: true,
    helpText: '\n  The type of aid being supplied (budget support, debt relief,\n  etc.).  This element specifies a default for all the\n  activity\'s financial transactions; it can be overridden at the\n  individual transaction level.\n\n  For the value of the @code attribute, see\n  http://iatistandard.org/codelists/aid_type\n'
  },
  'default-finance-type': {
    fixedDataType: true,
    helpText: '\n  The type of finance (e.g. debt relief). The types will be\n  defined by IATI.  This the default value for all transactions\n  in the activity report; it can be overridded by individual\n  transactions.\n\n  For the value of the @code attribute, see\n  http://iatistandard.org/codelists/finance_type\n'
  },
  'iati-identifier': {
    fixedDataType: true,
    helpText: '\n  A globally unique identifier for this activity. This should be\n  in the form of the IATI Organisation Identifier (for the\n  reporting organisation) concatenated to that organisation\'s\n  activity identifier. (NB. Two or more reporting organisations\n  may publish information on the same activity. To\n  cross-reference these reports the other-identifier element\n  should be used.)\n'
  },
  'other-identifier': {
    fixedDataType: true,
    helpText: '\n  An alternative, non-IATI identifier for the activity.  This\n  identifier is not guaranteed to be unique or persistent (it\n  depends on the owner organisation\'s policies, not IATI\'s).\n\n  If other-identifier is present then either @owner-ref or\n  @owner-name must be present\n'
  },
  'title': {
    fixedDataType: true,
    helpText: '\n  A short, human-readable title.  May be repeated for different\n  languages.\n'
  },
  'description': {
    fixedDataType: true,
    helpText: '\n  A human-readable description of the transaction.\n'
  },
  'sector': {
    fixedDataType: true,
    helpText: '\n  Sector code and name.  For the value of the @code attribute,\n  see http://iatistandard.org/codelists/sector\n\n  Either the @code attribute or descriptive text content must be\n  present.\n'
  },
  'activity-date': {
    fixedDataType: true,
    helpText: '\n  The planned and actual start and completion dates of the \n  activity. Start dates may reflect either the commencement of \n  funding, planning or physical activity. End dates should, \n  wherever possible, reflect the ending of physical activity. \n  Dates should be in ISO 8601 date YYYY-MM-DD format, e.g. \n  2010-10-01. \n  \n  For the value of the @type attribute, see\n  http://iatistandard.org/codelists/activity_date_type\n\n  The text content may contain a general date text (e.g. 2011Q1)\n  for recording less specific dates such as month, quarter, or\n  year.\n'
  },
  'activity-status': {
    fixedDataType: true,
    helpText: '\n  The current status of the project (e.g. "planned"), using a\n  list defined by IATI.  For the value of the @code attribute,\n  see http://iatistandard.org/codelists/activity_status\n'
  },
  'contact-info': {
    fixedDataType: true,
    helpText: '\n  Contact information for the project.  Specify whatever is\n  available.  You may repeat this element for each contact\n  person.\n'
  },
  'default-tied-status': {
    fixedDataType: true,
    helpText: '\n  Specify whether the aid is untied, tied, or partially tied,\n  using a code list created by IATI.  The content is free text\n  that can optionally provide more detail.  For the value of the\n  @code attribute, see\n  http://iatistandard.org/codelists/tied_status\n'
  },
  'policy-marker': {
    fixedDataType: true,
    helpText: '\n  A policy or theme addressed by the activity.  A text\n  description of the theme appears in the content, and a formal\n  identifier appears in the @ref attribute.  The @vocabulary\n  attribute can also help to segment the markers into separate\n  vocabularies.  This element can be repeated for each policy\n  marker.  For the value of the @code attribute, see\n  http://iatistandard.org/codelists/policy_marker\n'
  },
  'location': {
    fixedDataType: true,
    helpText: '\n  A geographical location.\n'
  },
  'capital-spend': {
    fixedDataType: true,
    helpText: '\n  The percentage of the total commitment that is for capital\n  spending\n'
  },
  'transaction': {
    fixedDataType: true,
    helpText: '\n  Committed or actual money flowing in or out of an aid\n  activity.The @ref attribute allows uniquely identifying a\n  transaction, to match it up with the corresponding in- or\n  outflow in a different activity.\n'
  },
  'result': {
    fixedDataType: true,
    helpText: '\n  A measurable result of aid work.\n'
  },
  'conditions': {
    fixedDataType: true,
    helpText: '\n  Conditions attached to the activity.\n'
  },
  'budget': {
    fixedDataType: true,
    helpText: '\n  The value of the aid activity\'s budget for each financial year\n  as in the original project document.\n'
  },
  'planned-disbursement': {
    fixedDataType: true,
    helpText: '\n'
  },
  'country-budget-items': {
    fixedDataType: true,
    helpText: '\n  Recipient country budget items.\n\n  This item encodes the alignment of activities with both the\n  functional and administrative classifications used in the\n  recipient country\'s Chart of Accounts. This applies to both\n  on- and off-budget activities.\n'
  },
  'related-activity': {
    fixedDataType: true,
    helpText: '\n  XX.XX Related Activity\n\n  Another IATI activity related to this one.  The \'type\'\n  attribute describes the type of relationship (e.g. parent,\n  sibling).  This does not need to be used to express funding\n  relationships, since those are covered in individual\n  transactions.\n\n  For the value of the @type attribute, see\n  http://iatistandard.org/codelists/related_activity_type\n'
  },
  'document-link': {
    fixedDataType: true,
    helpText: '\n  A categorized link to an external document.\n'
  },
  'legacy-data': {
    fixedDataType: true,
    helpText: '\n  Hold a single name=value pair of legacy data.  This element is\n  *not* for adding new data types; instead, it holds the\n  original (non-IATI) value or code for an existing data type.\n'
  },
  'crs-add': {
    fixedDataType: true,
    helpText: '\n  Additional items specific to CRS++ reporting.\n'
  },
  'fss': {
    fixedDataType: true,
    helpText: '\n  This section allows entry of data required for the OECD\n  DAC Forward Spending Survey at an activity level.\n'
  }
};

SAMPLE_DATA = {
  "Project ID": "AGNA64",
  "Title Project": "WE CAN end violence against women in Afghanistan",
  "Short Descr Project": "The project is part of PIP P00115 which is the South Asia regional “We Can end violence against women campaign”. The objective is to challenge and change the patriarchal idea, beliefs, attitude, behaviour and practice that perpetuate violence against women. Project will take numbers of initiatives, which ultimately contribute to breaking the silence of domestic violence, which has huge prevalence all over the Afghan society. Under this project numbers of campaign initiatives will be taken to mobilise 2000 change makers and to make them aware about the issue and bring positive change in their personal attitudes, behaviours and practices.",
  "Project Starts": "1-May-07",
  "Project Ends": "31-Mar-11",
  "Level of Impact": "Country",
  "ISO CODE": "AF",
  "Loc of Impact": "Afghanistan",
  "Loc Info": " Kabul ",
  "% Aim 1: Right to Sustainable Livelihoods": "-0",
  "% Aim 2: Right to Essential services": "-0",
  "% Aim 3: Right to Life and Security": "-0",
  "% Aim 4: Right to be heard": "10",
  "% Aim 5: Right to Equity": "90",
  " Expenditure prior to 2010/11": " 95,018 ",
  "Expenditure in 2010/11": " 40,415 ",
  " Revised Budget  in current and future years (£) ": "-0",
  "Total Value all years (£)": " 135,433 "
};

DEFAULT_MODEL = {
  organisation: {},
  mapping: {
    'iati-identifier': {},
    'title': {},
    'description': {},
    'activity-status': {},
    'activity-date-start': {
      datatype: 'compound',
      label: 'Activity Start Date',
      'iati-field': 'activity-date',
      fields: {
        'type': {
          'constant': 'start-planned',
          'datatype': 'constant'
        },
        'iso-date': {},
        'text': {}
      }
    },
    'activity-date-end': {
      datatype: 'compound',
      label: 'Activity End Date',
      'iati-field': 'activity-date',
      fields: {
        'type': {
          'constant': 'end-planned',
          'datatype': 'constant'
        },
        'iso-date': {},
        'text': {}
      }
    },
    'recipient-country': {},
    'recipient-region': {},
    'funding-organisation': {
      datatype: 'compound',
      'iati-field': 'participating-org',
      label: 'Funding Organisation',
      fields: {
        'role': {
          'constant': 'Funding',
          'datatype': 'constant'
        },
        'text': {},
        'ref': {},
        'type': {}
      }
    },
    'extending-organisation': {
      datatype: 'compound',
      'iati-field': 'participating-org',
      label: 'Extending Organisation',
      fields: {
        'role': {
          'constant': 'Extending',
          'datatype': 'constant'
        },
        'text': {},
        'ref': {},
        'type': {}
      }
    },
    'implementing-organisation': {
      datatype: 'compound',
      'iati-field': 'participating-org',
      label: 'Implementing Organisation',
      fields: {
        'role': {
          'constant': 'Implementing',
          'datatype': 'constant'
        },
        'text': {},
        'ref': {},
        'type': {}
      }
    },
    sector: {},
    transaction: {}
  }
};

_ref = DEFAULT_MODEL.mapping;
for (key in _ref) {
  value = _ref[key];
  if ($.isEmptyObject(value)) {
    $.extend(value, DEFAULT_FIELD_SETUP[key]);
    value['iati-field'] = key;
  }
}

FIELDS_META = {
  label: {
    required: true
  }
};

String.prototype.dasherize = function() {
  return this.replace(/_/g, "-");
};

util = {
  flattenObject: function(obj) {
    var flat, pathStr, walk;
    flat = {};
    pathStr = function(path) {
      var ary, p;
      ary = [path[0]];
      ary = ary.concat((function() {
        var _i, _len, _ref1, _results;
        _ref1 = path.slice(1);
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          p = _ref1[_i];
          _results.push("[" + p + "]");
        }
        return _results;
      })());
      return ary.join('');
    };
    walk = function(path, o) {
      var newpath, _results;
      _results = [];
      for (key in o) {
        value = o[key];
        newpath = $.extend([], path);
        newpath.push(key);
        if ($.type(value) === 'object') {
          _results.push(walk(newpath, value));
        } else {
          if ($.type(value) === 'array') {
            newpath.push('');
          }
          _results.push(flat[pathStr(newpath)] = value);
        }
      }
      return _results;
    };
    walk([], obj);
    return flat;
  }
};

Widget = (function(_super) {

  __extends(Widget, _super);

  function Widget() {
    return Widget.__super__.constructor.apply(this, arguments);
  }

  Widget.prototype.deserialize = function(data) {};

  return Widget;

})(Delegator);

UniqueKeyWidget = (function(_super) {

  __extends(UniqueKeyWidget, _super);

  function UniqueKeyWidget() {
    return UniqueKeyWidget.__super__.constructor.apply(this, arguments);
  }

  UniqueKeyWidget.prototype.events = {
    'span click': 'onKeyClick'
  };

  UniqueKeyWidget.prototype.deserialize = function(data) {
    var availableKeys, fk, fv, k, uniq, v, _ref1, _ref2, _ref3;
    uniq = ((_ref1 = data['dataset']) != null ? _ref1['unique_keys'] : void 0) || [];
    availableKeys = [];
    _ref2 = data['mapping'];
    for (k in _ref2) {
      v = _ref2[k];
      if (v['datatype'] !== 'value') {
        _ref3 = v['fields'];
        for (fk in _ref3) {
          fv = _ref3[fk];
          availableKeys.push("" + k + "." + fk);
        }
      } else {
        availableKeys.push(k);
      }
    }
    this.keys = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = availableKeys.length; _i < _len; _i++) {
        k = availableKeys[_i];
        _results.push({
          'name': k,
          'used': __indexOf.call(uniq, k) >= 0
        });
      }
      return _results;
    })();
    return this.render();
  };

  UniqueKeyWidget.prototype.promptAddDimensionNamed = function(props, thename) {
    return false;
  };

  UniqueKeyWidget.prototype.render = function() {
    return this.element.html($.tmpl('tpl_unique_keys', {
      'keys': this.keys
    }));
  };

  UniqueKeyWidget.prototype.onKeyClick = function(e) {
    var idx;
    idx = this.element.find('span').index(e.currentTarget);
    this.keys[idx]['used'] = !this.keys[idx]['used'];
    this.render();
    return this.element.parents('form').first().change();
  };

  return UniqueKeyWidget;

})(Widget);

DimensionWidget = (function(_super) {

  __extends(DimensionWidget, _super);

  DimensionWidget.prototype.events = {
    '.add_field click': 'onAddFieldClick',
    '.add_nested_el click': 'onAddNestedElClick',
    '.field_add_alternative click': 'onAddAlternativeClick',
    '.field_add_transform click': 'onAddTransformClick',
    '.field_remove_transform click': 'onRemoveTransformClick',
    '.field_switch_constant click': 'onFieldSwitchConstantClick',
    '.field_switch_column click': 'onFieldSwitchColumnClick',
    '.field_rm click': 'onFieldRemoveClick',
    '.delete_dimension click': 'onDeleteDimensionClick',
    '.delete_tdatafield click': 'onDeleteTDataFieldClick',
    '.iatifield change': 'onIATIFieldChange',
    '.column change': 'onColumnChange'
  };

  function DimensionWidget(name, container, options) {
    this.formFieldRequired2 = __bind(this.formFieldRequired2, this);

    this.formFieldRequired = __bind(this.formFieldRequired, this);

    this.formFieldPrefix = __bind(this.formFieldPrefix, this);

    var el;
    this.name = name;
    el = $("<fieldset class='dimension' data-dimension-name='" + this.name + "'>            </fieldset>").appendTo(container);
    DimensionWidget.__super__.constructor.call(this, el, options);
    this.id = "" + (this.element.parents('.modeleditor').attr('id')) + "_dim_" + this.name;
    this.element.attr('id', this.id);
  }

  DimensionWidget.prototype.deserialize = function(data) {
    var formObj, k, v, _ref1, _ref2, _ref3, _results;
    this.data = ((_ref1 = data['mapping']) != null ? _ref1[this.name] : void 0) || {};
    this.iati_field = ((_ref2 = data['mapping']) != null ? _ref2[this.name]['iati-field'] : void 0) || '';
    this.meta = DIMENSION_META[this.iati_field] || {};
    if (this.data.datatype !== 'value' && !('fields' in this.data)) {
      this.data.fields = {
        'label': {
          'datatype': 'string'
        }
      };
    }
    this.element.html($.tmpl('tpl_dimension', this));
    this.element.trigger('fillColumnsRequest', [this.element.find('select.column')]);
    this.element.trigger('fillIATIfieldsRequest', [this.element.find('select.iatifield')]);
    formObj = {
      'mapping': {}
    };
    formObj['mapping'][this.name] = this.data;
    _ref3 = util.flattenObject(formObj);
    _results = [];
    for (k in _ref3) {
      v = _ref3[k];
      _results.push(this.element.find("[name=\"" + k + "\"]").val(v));
    }
    return _results;
  };

  DimensionWidget.prototype.formFieldPrefix = function() {
    return "mapping[" + this.name + "][fields]";
  };

  DimensionWidget.prototype.formFieldRequired = function(fieldName, fieldParent) {
    var _ref1;
    if (fieldParent) {
      return ((_ref1 = FIELDS_META[fieldName]) != null ? _ref1['required'] : void 0) || false;
    } else {
      return false;
    }
  };

  DimensionWidget.prototype.formFieldRequired2 = function(fieldName, fieldParent, transactionField) {
    var _ref1, _ref2;
    if (fieldParent) {
      if (DEFAULT_FIELD_SETUP[fieldParent]) {
        if (DEFAULT_FIELD_SETUP[fieldParent]['fields'] && DEFAULT_FIELD_SETUP[fieldParent]['fields'][fieldName]) {
          return ((_ref1 = DEFAULT_FIELD_SETUP[fieldParent]['fields'][fieldName]) != null ? _ref1['required'] : void 0) || false;
        } else {
          return false;
        }
      } else {
        return false;
      }
    } else {
      return ((_ref2 = FIELDS_META[fieldName]) != null ? _ref2['required'] : void 0) || false;
    }
  };

  DimensionWidget.prototype.onAddFieldClick = function(e) {
    var curRow, name, row;
    curRow = $(e.currentTarget).parents('tr').first();
    name = prompt("Field name:").trim();
    row = this._makeFieldRow(name, curRow.data('prefix'), curRow.data('level'));
    row.insertBefore(curRow);
    this.element.trigger('fillColumnsRequest', [row.find('select.column')]);
    return false;
  };

  DimensionWidget.prototype.onAddNestedElClick = function(e) {
    var curRow, data, level, name, prefix, row;
    curRow = $(e.currentTarget).parents('tr').first();
    name = prompt("Element name:").trim();
    prefix = curRow.data('prefix');
    level = curRow.data('level');
    data = {
      'fields': {}
    };
    data['fields'][name] = {
      'datatype': 'compound',
      'label': name,
      'iati_field': name
    };
    row = $.tmpl('tpl_table_recursive', {
      'data': data,
      'dimensionName': '',
      'prefix2': '',
      'iati_field': '',
      'prefix': prefix,
      'level': level,
      'formFieldRequired2': ''
    });
    row.insertBefore(curRow);
    this.element.trigger('fillColumnsRequest', [row.find('select.column')]);
    return false;
  };

  DimensionWidget.prototype.onDeleteDimensionClick = function(e) {
    var theform;
    theform = this.element.parents('form').first();
    $(e.currentTarget).parents('fieldset').first().remove();
    theform.change();
    return false;
  };

  DimensionWidget.prototype.onDeleteTDataFieldClick = function(e) {
    var theform;
    theform = this.element.parents('form').first();
    $(e.currentTarget).parents('fieldset').first().remove();
    theform.change();
    return false;
  };

  DimensionWidget.prototype.onColumnChange = function(e) {
    var construct_iatifield, curDimension, dimension_data, dimension_name, thiscolumn;
    curDimension = $(e.currentTarget).parents('fieldset').first();
    dimension_name = curDimension.data('dimension-name');
    dimension_data = curDimension.serializeObject()['mapping'];
    thiscolumn = $(e.currentTarget).val();
    construct_iatifield = this.doIATIFieldSample(dimension_name, dimension_data, thiscolumn);
    curDimension.find('span').first().html('Sample data: <code></code>');
    curDimension.find('span code').first().text(construct_iatifield);
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.doIATIFieldSample = function(dimension_name, dimension_data, thiscolumn) {
    var construct_iatifield, k, samplevalue, textdata, v, _ref1;
    construct_iatifield = '<' + dimension_data[dimension_name]['iati-field'];
    _ref1 = dimension_data[dimension_name]['fields'];
    for (k in _ref1) {
      v = _ref1[k];
      if (k === 'text') {
        if (v['datatype'] === 'constant') {
          textdata = dimension_data[dimension_name]['fields'][k]['constant'];
        } else {
          textdata = this.dataSample(dimension_data[dimension_name]['fields'][k]['column']);
        }
      } else {
        if (v['datatype'] === 'constant') {
          samplevalue = dimension_data[dimension_name]['fields'][k]['constant'];
        } else {
          samplevalue = this.dataSample(dimension_data[dimension_name]['fields'][k]['column']);
        }
        construct_iatifield = construct_iatifield + ' ' + k + '="' + samplevalue + '"';
      }
    }
    if (textdata) {
      construct_iatifield = construct_iatifield + ">" + textdata + "</" + dimension_data[dimension_name]['iati-field'] + ">";
    } else {
      construct_iatifield = construct_iatifield + "/>";
    }
    return construct_iatifield;
  };

  DimensionWidget.prototype.onIATIFieldChange = function(e) {
    var k, row, thisfield, thisfieldsfields, v;
    this.element.parents('form').first().change();
    thisfield = $(e.currentTarget).val();
    this.element.find('tbody tr').remove();
    thisfieldsfields = DEFAULT_FIELD_SETUP[thisfield]['fields'];
    for (k in thisfieldsfields) {
      v = thisfieldsfields[k];
      row = this._makeFieldRowUpdate(k, thisfield, v['required']);
      row.appendTo(this.element.find('tbody'));
      this.element.trigger('fillColumnsRequest', [row.find('select.column')]);
    }
    return false;
  };

  DimensionWidget.prototype.onFieldRemoveClick = function(e) {
    var curRow;
    curRow = $(e.currentTarget).parents('tr').first();
    curRow.next('.alternativesCounter').remove();
    curRow.remove();
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onAddAlternativeClick = function(e) {
    var alternativesCounter, curRow, fieldName, prefix;
    curRow = $(e.currentTarget).parents('tr').first();
    prefix = this.formFieldPrefix();
    fieldName = curRow.data('field-name');
    alternativesCounter = curRow.data('alternatives-counter');
    alternativesCounter += 1;
    curRow.next('.alternativesCounter').first().val(alternativesCounter);
    curRow.after("<tr><td><input name=\"" + prefix + "[" + fieldName + "][alternatives][" + alternativesCounter + "]\" value=\"test\" /></td></tr>");
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onAddTransformClick = function(e) {
    var curRow, fieldName, prefix;
    curRow = $(e.currentTarget).parents('tr').first();
    prefix = curRow.data('prefix');
    fieldName = curRow.data('field-name');
    curRow.after("<tr><td><input name=\"" + prefix + "[" + fieldName + "][text-transform-type]\" value=\"\" /></td></tr>");
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onRemoveTransformClick = function(e) {
    var curRow;
    curRow = $(e.currentTarget).parents('tr').first();
    curRow.find('.transform').remove();
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onFieldSwitchConstantClick = function(e) {
    var curDimension, curRow, iatiField, row;
    curRow = $(e.currentTarget).parents('tr').first();
    curDimension = $(e.currentTarget).parents('fieldset').first();
    iatiField = $(e.currentTarget).parents('fieldset').first().find('.iatifield').val();
    row = this._makeFieldRow(curRow.data('field-name'), curRow.data('prefix'), curRow.data('level'), curDimension.data('dimension-name'), iatiField, true);
    curRow.replaceWith(row);
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.onFieldSwitchColumnClick = function(e) {
    var curDimension, curRow, iatiField, row;
    curRow = $(e.currentTarget).parents('tr').first();
    curDimension = $(e.currentTarget).parents('fieldset').first();
    iatiField = $(e.currentTarget).parents('fieldset').first().find('.iatifield').val();
    row = this._makeFieldRow(curRow.data('field-name'), curRow.data('prefix'), curRow.data('level'), curDimension.data('dimension-name'), iatiField, false);
    curRow.replaceWith(row);
    this.element.trigger('fillColumnsRequest', [row.find('select.column')]);
    this.element.parents('form').first().change();
    return false;
  };

  DimensionWidget.prototype.promptAddDimensionNamed = function(props, thename) {
    return false;
  };

  DimensionWidget.prototype.dataSample = function(columnName) {
    return SAMPLE_DATA[columnName];
  };

  DimensionWidget.prototype._makeFieldRow = function(name, prefix, level, dimensionName, iatiField, constant) {
    var tplName;
    if (constant == null) {
      constant = false;
    }
    tplName = constant ? 'tpl_dimension_field_const' : 'tpl_dimension_field';
    return $.tmpl(tplName, {
      'fieldName': name,
      'dimensionName': dimensionName,
      'iatiField': iatiField,
      'prefix': prefix,
      'level': level,
      'required': this.formFieldRequired,
      field: {}
    });
  };

  DimensionWidget.prototype._makeFieldRowUpdate = function(name, thisfield, requiredvar, constant) {
    var tplName;
    if (constant == null) {
      constant = false;
    }
    tplName = constant ? 'tpl_dimension_field_const' : 'tpl_dimension_field';
    return $.tmpl(tplName, {
      'fieldName': name,
      'prefix': this.formFieldPrefix,
      'required': this.formFieldRequired2
    });
  };

  return DimensionWidget;

})(Widget);

DimensionsWidget = (function(_super) {

  __extends(DimensionsWidget, _super);

  DimensionsWidget.prototype.events = {
    '.iati_field_add change': 'onAddIATIFieldClick',
    '.add_value_dimension click': 'onAddValueDimensionClick',
    '.add_compound_dimension click': 'onAddCompoundDimensionClick',
    '.copy_dimension click': 'onCopyDimensionClick'
  };

  function DimensionsWidget(element, options) {
    DimensionsWidget.__super__.constructor.apply(this, arguments);
    this.widgets = [];
    this.dimsEl = this.element.find('.dimensions').get(0);
    this.element.trigger('doFieldSelectors', 'iatifield');
    this.element.trigger('doFieldSelectors', 'column');
  }

  DimensionsWidget.prototype.addDimension = function(name) {
    var w;
    w = new DimensionWidget(name, this.dimsEl);
    this.widgets.push(w);
    return w;
  };

  DimensionsWidget.prototype.removeDimension = function(name) {
    var idx, w, _i, _len, _ref1;
    idx = null;
    _ref1 = this.widgets;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      w = _ref1[_i];
      if (w.name === name) {
        idx = this.widgets.indexOf(w);
        break;
      }
    }
    if (idx !== null) {
      return this.widgets.splice(idx, 1)[0].element.remove();
    }
  };

  DimensionsWidget.prototype.deserialize = function(data) {
    var dims, name, obj, toRemove, widget, _i, _j, _len, _len1, _ref1, _results;
    if (this.ignoreParent) {
      return;
    }
    dims = data['mapping'] || {};
    toRemove = [];
    _ref1 = this.widgets;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      widget = _ref1[_i];
      if (widget.name in dims) {
        widget.deserialize(data);
        delete dims[widget.name];
      } else {
        toRemove.push(widget.name);
      }
    }
    for (_j = 0, _len1 = toRemove.length; _j < _len1; _j++) {
      name = toRemove[_j];
      this.removeDimension(name);
    }
    _results = [];
    for (name in dims) {
      obj = dims[name];
      _results.push(this.addDimension(name).deserialize(data));
    }
    return _results;
  };

  DimensionsWidget.prototype.createName = function(name) {
    var names;
    names = this.widgets.map(function(x) {
      return x.name;
    });
    while (true) {
      if (__indexOf.call(names, name) >= 0) {
        name += '~';
      } else {
        return name;
      }
    }
  };

  DimensionsWidget.prototype.onCopyDimensionClick = function(e) {
    var data, fieldset, name, widget, _i, _len, _ref1;
    fieldset = $(e.currentTarget).parents('fieldset').first();
    name = prompt("Give a unique name for your new dimension (letters and numbers, no spaces):");
    data = {
      'mapping': {}
    };
    data['mapping'][name] = {};
    _ref1 = this.widgets;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      widget = _ref1[_i];
      if (widget.name === fieldset.data('dimension-name')) {
        data['mapping'][name] = widget.data;
        break;
      }
    }
    data['mapping'][name]['label'] = name;
    this.addDimension(name.trim()).deserialize(data);
    return false;
  };

  DimensionsWidget.prototype.promptAddDimension = function(props) {
    var data, iati_field, name;
    name = prompt("Give a unique name for your new dimension (letters and numbers, no spaces):", this.createName(props['iati-field']));
    if (!name) {
      return false;
    }
    data = {
      'mapping': {}
    };
    data['mapping'][name] = props;
    iati_field = data['mapping'][name]['iati-field'];
    data['mapping'][name] = DEFAULT_FIELD_SETUP[iati_field];
    data['mapping'][name]['label'] = name;
    data['mapping'][name]['iati-field'] = iati_field;
    return this.addDimension(name.trim()).deserialize(data);
  };

  DimensionsWidget.prototype.promptAddDimensionNamed = function(thename, props) {
    var data, name;
    alert("Column \"" + thename + "\" has been added.");
    name = thename;
    if (!name) {
      return false;
    }
    data = {
      'mapping': {}
    };
    data['mapping'][name] = props;
    return this.addDimension(name.trim()).deserialize(data);
  };

  DimensionsWidget.prototype.onAddValueDimensionClick = function(e) {
    this.promptAddDimension({
      'datatype': 'value'
    });
    return false;
  };

  DimensionsWidget.prototype.onAddCompoundDimensionClick = function(e) {
    this.promptAddDimension({
      'datatype': 'compound'
    });
    return false;
  };

  DimensionsWidget.prototype.onAddIATIFieldClick = function(e) {
    var thefield;
    thefield = $(e.currentTarget).val();
    this.promptAddDimension({
      'datatype': 'compound',
      'iati-field': thefield
    });
    $(e.currentTarget).val('');
    return false;
  };

  return DimensionsWidget;

})(Delegator);

ModelEditor = (function(_super) {

  __extends(ModelEditor, _super);

  ModelEditor.prototype.widgetTypes = {
    '.unique_keys_widget': UniqueKeyWidget,
    '.dimensions_widget': DimensionsWidget
  };

  ModelEditor.prototype.events = {
    'multipleSectorsRequest': 'onMultipleSectorsSetup',
    'modelChange': 'onModelChange',
    'fillColumnsRequest': 'onFillColumnsRequest',
    'fillIATIfieldsRequest': 'onFillIATIfieldsRequest',
    '.steps > ul > li click': 'onStepClick',
    '.steps > ul > li > ul > li click': 'onStepDimensionClick',
    '.forms form submit': 'onFormSubmit',
    '.forms form change': 'onFormChange',
    '#showdebug click': 'onShowDebugClick',
    '.add_data_field click': 'onAddDataFieldClick',
    'doFieldSelectors': 'onDoFieldSelectors',
    '#columns .availablebtn click': 'onColumnsAvailableClick',
    '#columns .allbtn click': 'onColumnsAllClick',
    '#iatifields .availablebtn click': 'onIATIFieldsAvailableClick',
    '#iatifields .allbtn click': 'onIATIFieldsAllClick'
  };

  function ModelEditor(element, options) {
    var ctor, e, model_data, selector, x, _i, _len, _ref1, _ref2;
    ModelEditor.__super__.constructor.apply(this, arguments);
    $('#multiple_rows_selector').html("<option value=''>One row per activity</option>" + ((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.options.iatifields;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        x = _ref1[_i];
        if (x !== '') {
          _results.push("<option value='" + x + "'>Multiple " + x + " rows per activity</option>");
        }
      }
      return _results;
    }).call(this)).join('\n'));
    if (this.options.model_data) {
      model_data = JSON.parse(this.options.model_data);
    } else {
      model_data = DEFAULT_MODEL;
    }
    this.data = $.extend(true, {}, model_data);
    this.widgets = [];
    this.form = $(element).find('.forms form').eq(0);
    this.id = this.element.attr('id');
    if (!(this.id != null)) {
      this.id = Math.floor(Math.random() * 0xffffffff).toString(16);
      this.element.attr('id', this.id);
    }
    this.element.find('script[type="text/x-jquery-tmpl"]').each(function() {
      return $(this).template($(this).attr('id'));
    });
    this.options.columns.unshift('');
    this.element.find('select.iatifield').each(function() {
      return $(this).trigger('fillColumnsRequest', [this]);
    });
    this.options.iatifields.unshift('');
    this.element.find('select.iatifield').each(function() {
      return $(this).trigger('fillIATIfieldsRequest', [this]);
    });
    _ref1 = this.widgetTypes;
    for (selector in _ref1) {
      ctor = _ref1[selector];
      _ref2 = this.element.find(selector).get();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        e = _ref2[_i];
        this.widgets.push(new ctor(e));
      }
    }
    this.element.trigger('modelChange');
    this.setStep(0);
  }

  ModelEditor.prototype.setStep = function(s) {
    $(this.element).find('.steps > ul > li').removeClass('active').eq(s).addClass('active');
    return $(this.element).find('.forms div.formpart').hide().eq(s).show();
  };

  ModelEditor.prototype.onStepClick = function(e) {
    var idx;
    idx = this.element.find('.steps > ul > li').index(e.currentTarget);
    this.setStep(idx);
    return false;
  };

  ModelEditor.prototype.onAddDataFieldClick = function(e) {
    var thevar, w, _i, _len, _ref1;
    thevar = $(e.currentTarget).text();
    _ref1 = this.widgets;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      w = _ref1[_i];
      w.promptAddDimensionNamed(thevar, {
        'datatype': 'value',
        'column': thevar,
        'label': thevar
      });
    }
    this.data = this.form.serializeObject();
    this.element.trigger('modelChange');
    return $(e.currentTarget).removeClass('add_data_field available').addClass('unavailable');
  };

  ModelEditor.prototype.onShowDebugClick = function(e) {
    if ($('#debug').hasClass('debug-shown')) {
      $('#debug').slideUp().removeClass('debug-shown');
    } else {
      $('#debug').slideDown().addClass('debug-shown');
    }
    return false;
  };

  ModelEditor.prototype.onFormChange = function(e) {
    if (this.ignoreFormChange) {
      return;
    }
    this.data = this.form.serializeObject();
    this.form.find('.column').each(function() {
      var columnname;
      columnname = $(this).val();
      return $('#user_columns ul li a').each(function() {
        if (($(this).text()) === columnname) {
          return $(this).removeClass('available').addClass('unavailable');
        }
      });
    });
    this.element.trigger('doFieldSelectors', 'iatifield');
    this.element.trigger('doFieldSelectors', 'column');
    this.ignoreFormChange = true;
    this.element.trigger('modelChange');
    return this.ignoreFormChange = false;
  };

  ModelEditor.prototype.onColumnsAvailableClick = function(e) {
    $('#columns ul').addClass('hideunavailable');
    $('#columns .allbtn').removeClass('fieldsbuttons-selected');
    return $('#columns .availablebtn').addClass('fieldsbuttons-selected');
  };

  ModelEditor.prototype.onColumnsAllClick = function(e) {
    $('#columns ul').removeClass('hideunavailable');
    $('#columns .availablebtn').removeClass('fieldsbuttons-selected');
    return $('#columns .allbtn').addClass('fieldsbuttons-selected');
  };

  ModelEditor.prototype.onIATIFieldsAvailableClick = function(e) {
    $('#iatifields ul').addClass('hideunavailable');
    $('#iatifields .allbtn').removeClass('fieldsbuttons-selected');
    return $('#iatifields .availablebtn').addClass('fieldsbuttons-selected');
  };

  ModelEditor.prototype.onIATIFieldsAllClick = function(e) {
    $('#iatifields ul').removeClass('hideunavailable');
    $('#iatifields .availablebtn').removeClass('fieldsbuttons-selected');
    return $('#iatifields .allbtn').addClass('fieldsbuttons-selected');
  };

  ModelEditor.prototype.onDoFieldSelectors = function(e) {
    $('#' + e + 's ul li code').each(function() {
      if ($(this).hasClass('unavailable')) {
        $(this).removeClass('unavailable');
        return $(this).addClass('available');
      }
    });
    return this.form.find('.' + e).each(function() {
      var iatiname;
      iatiname = $(this).val();
      return $('#' + e + 's ul li code').each(function() {
        if ($(this).text() === iatiname) {
          $(this).removeClass('available');
          return $(this).addClass('unavailable');
        }
      });
    });
  };

  ModelEditor.prototype.onFormSubmit = function(e) {
    var api_address, csv_file, model_file;
    e.preventDefault();
    api_address = 'api_convert';
    model_file = $('#convert_model_file_URL').val();
    csv_file = $('#convert_csv_file_URL').val();
    $.post(api_address, {
      csv_file: csv_file,
      model_file: model_file
    }, {
      complete: function(result) {
        return alert(result.status);
      }
    }, "json");
    return false;
  };

  ModelEditor.prototype.onModelChange = function() {
    var dimNames, k, n, v, w, _i, _len, _ref1, _ref2;
    _ref1 = util.flattenObject(this.data);
    for (k in _ref1) {
      v = _ref1[k];
      this.form.find("[name=\"" + k + "\"]").val(v);
    }
    _ref2 = this.widgets;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      w = _ref2[_i];
      w.deserialize($.extend(true, {}, this.data));
    }
    dimNames = (function() {
      var _ref3, _results;
      _ref3 = this.data['mapping'];
      _results = [];
      for (k in _ref3) {
        v = _ref3[k];
        _results.push(k);
      }
      return _results;
    }).call(this);
    this.element.find('.steps ul.steps_dimensions').html(((function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = dimNames.length; _j < _len1; _j++) {
        n = dimNames[_j];
        _results.push('<li><a href="#' + ("m1_dim_" + n) + '">' + ("" + this.data['mapping'][n]['label'] + "</a>"));
      }
      return _results;
    }).call(this)).join('\n'));
    return $('#debug').text(JSON.stringify(this.data, null, 2));
  };

  ModelEditor.prototype.onFillColumnsRequest = function(elem) {
    var x;
    return $(elem).html(((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.options.columns;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        x = _ref1[_i];
        _results.push("<option value='" + x + "'>" + x + "</option>");
      }
      return _results;
    }).call(this)).join('\n'));
  };

  ModelEditor.prototype.onFillIATIfieldsRequest = function(elem) {
    var x;
    return $(elem).html(((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.options.iatifields;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        x = _ref1[_i];
        _results.push("<option value='" + x + "'>" + x + "</option>");
      }
      return _results;
    }).call(this)).join('\n'));
  };

  return ModelEditor;

})(Delegator);

$.plugin('modelEditor', ModelEditor);

this.ModelEditor = ModelEditor;
